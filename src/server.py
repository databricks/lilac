"""Serves the Lilac server."""

import os
from typing import Any

from fastapi import APIRouter, FastAPI
from fastapi.responses import HTMLResponse, ORJSONResponse
from fastapi.routing import APIRoute
from fastapi.staticfiles import StaticFiles

from . import (
    router_concept,
    router_data_loader,
    router_dataset,
    router_embedding,
    router_signal,
    router_tasks,
)
from .router_utils import RouteErrorHandler
from .tasks import task_manager

DIST_PATH = os.path.abspath(os.path.join('dist'))

tags_metadata: list[dict[str, Any]] = [{
    'name': 'datasets',
    'description': 'API for querying a dataset.',
}, {
    'name': 'concepts',
    'description': 'API for managing concepts.',
}, {
    'name': 'data_loaders',
    'description': 'API for loading data.',
}, {
    'name': 'signals',
    'description': 'API for managing signals.',
}, {
    'name': 'embeddings',
    'description': 'API for managing embeddings.',
}]


def custom_generate_unique_id(route: APIRoute) -> str:
  """Generate the name for the API endpoint."""
  return route.name


app = FastAPI(
    default_response_class=ORJSONResponse,
    generate_unique_id_function=custom_generate_unique_id,
    openapi_tags=tags_metadata)

v1_router = APIRouter(route_class=RouteErrorHandler)
v1_router.include_router(router_dataset.router, prefix='/datasets', tags=['datasets'])
v1_router.include_router(router_concept.router, prefix='/concepts', tags=['concepts'])
v1_router.include_router(router_data_loader.router, prefix='/data_loaders', tags=['data_loaders'])
v1_router.include_router(router_signal.router, prefix='/signals', tags=['signals'])
v1_router.include_router(router_embedding.router, prefix='/embeddings', tags=['embeddings'])
v1_router.include_router(router_tasks.router, prefix='/tasks', tags=['tasks'])

app.include_router(v1_router, prefix='/api/v1')

# For static files generated by webpack, including bundle.js.
# NOTE: We use check_dir=False because the server can start before files exist.
app.mount(
    '/static',
    StaticFiles(directory=os.path.join(DIST_PATH, 'static'), check_dir=False),
    name='static')
# For hot updated with webpack dev server.
app.mount(
    '/hot', StaticFiles(directory=os.path.join(DIST_PATH, 'hot'), check_dir=False), name='hot')


@app.on_event('shutdown')
async def shutdown_event() -> None:
  """Kill the task manager when FastAPI shuts down."""
  await task_manager().stop()


@app.get('/{full_path:path}', response_class=HTMLResponse)
def read_index() -> str:
  """Return the index.html file."""
  with open(os.path.join(DIST_PATH, 'index.html')) as f:
    return f.read()
